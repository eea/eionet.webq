<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder
            system-properties-mode="OVERRIDE"
            location="classpath:task.properties,
                      classpath:web_service.properties,
                      classpath:cas.properties,
                      classpath:db.properties,
                      classpath:env.properties"
            ignore-unresolvable="true"/>
    <context:component-scan base-package="eionet.webq"/>
    <mvc:annotation-driven conversion-service="conversionService"/>

    <!-- The following setting is a nice generic approach for content conversion, but it has to be implemented for all methods.
     this can be added in the future if we decide to refactor the custom WebQProxyDelegation methods -->
      <!--  <mvc:message-converters>
            <ref bean="stringHttpMessageConverter" />
            <ref bean="jsonMessageConverter" />
            <ref bean="jaxbHttpMessageConverter" />
        </mvc:message-converters>
    </mvc:annotation-driven>-->
    <cache:annotation-driven/>
    <context:spring-configured/>

    <bean id="cacheManager" class="eionet.webq.cache.GuavaCacheManager">
        <property name="cacheBuilderSpec" ref="guavaCacheSpec" />
        <property name="cacheNames" value="conversions" />
    </bean>
    
    <bean id="guavaCacheSpec" class="com.google.common.cache.CacheBuilderSpec" factory-method="parse">
        <constructor-arg value="maximumSize=200, expireAfterAccess=60m" />
    </bean>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" lazy-init="true">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan">
            <list>
                <value>eionet.webq.dao.orm</value>
            </list>
        </property>
        <property name="namingStrategy">
            <bean class="org.hibernate.cfg.ImprovedNamingStrategy"/>
        </property>
        <property name="hibernateProperties" ref="hibernate_properties"/>
    </bean>

    <tx:annotation-driven proxy-target-class="true"/>

    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="conversionService"
          class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <ref bean="multipartFileToUserFileConverter" />
                <ref bean="multipartToByteArray" />
                <ref bean="multipartFileToUploadedFile" />
            </set>
        </property>
    </bean>

    <bean id="userService" class="eionet.webq.service.UserManagementServiceImpl">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="messages/application_messages"/>
    </bean>

    <bean id="messageSourceAncestor" class="org.springframework.context.support.MessageSourceAccessor">
        <constructor-arg index="0" ref="messageSource"/>
    </bean>

    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>

    <bean id="jsonMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes" value="application/json" />
        <property name="defaultCharset" value="UTF-8" />
    </bean>

    <bean id="jaxbHttpMessageConverter" class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
        <constructor-arg ref="jaxbMarshaller" index="0"/>
        <constructor-arg ref="jaxbMarshaller" index="1"/>
        <property name="defaultCharset" value="UTF-8" />
        <property name="supportedMediaTypes">
            <list>
                <value>application/xml</value>
                <value>text/xml</value>
            </list>
        </property>
    </bean>

    <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>application/xml</value>
                <value>text/xml</value>
                <value>text/html</value>
                <value>application/json</value>
            </list>
        </property>
        <property name="defaultCharset" value="UTF-8" />
    </bean>

    <bean id="jaxbMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="classesToBeBound">
            <list>
                <value>eionet.webq.dto.XmlSaveResult</value>
                <value>eionet.webq.dto.ListConversionResponse</value>
                <value>eionet.webq.dto.FileInfo</value>
            </list>
        </property>
    </bean>

    <bean id="initialUser" class="eionet.webq.service.InitialUser" init-method="createUser">
        <property name="userManagementService" ref="userService"/>
        <property name="initialUsername" value="${initial.admin.username}"/>
        <property name="initialPassword" value="${initial.admin.password}"/>
    </bean>

    <bean id="restTemplate" class="org.springframework.web.client.RestTemplate" primary="false">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter">
                    <property name="defaultCharset" value="UTF-8" />
                </bean>
                <bean class="org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter">
                    <property name="multipartCharset" value="UTF-8"/>
                    <property name="charset" value="UTF-8" />
                </bean>
                <ref bean="stringHttpMessageConverter" />
                <ref bean="jaxbHttpMessageConverter" />
                <ref bean="jsonMessageConverter" />
            </list>
        </property>
    </bean>

</beans>
