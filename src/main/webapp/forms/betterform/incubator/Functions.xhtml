<?xml version="1.0" encoding="ISO-8859-1"?>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xf="http://www.w3.org/2002/xforms"
        >
    <head>
        <!--
        ~ Copyright (c) 2012. betterFORM Project - http://www.betterform.de
        ~ Licensed under the terms of BSD License
        -->

	<link rel="SHORTCUT ICON" href="../../images/betterform.ico"/>
    <link rel="ICON" href="../../images/betterform.ico" type="image/x-icon"/>
		
        <title>XForms Functions</title>
        <style type="text/css">
            td{
                padding:5px;
            }

            .xfGroup .xfGroupLabel{
                border:none;
            }
            .power .xfValue,
            .compare .xfValue {
                width:20px;
            }
            .booleanFromString .xfValue,
            .isCardNumber .xfValue{
                width:120px;
            }
            .digest .xfValue {
                width:80px;
            }

        </style>

    </head>
    <body>
        <div style="display:none;">
            <xf:model>
                <xf:instance id="i-default" xmlns="">
                    <data>
                        <booleanFromString>5 eq 5</booleanFromString>
                        <isCardNumber>4111111111111111</isCardNumber>
                        <empty/>
                        <power>2</power>
                        <power>10</power>
                        <value>10</value>
                        <value>100</value>
                        <compare1>1</compare1>
                        <compare2>2</compare2>
                        <countNonEmpty>*</countNonEmpty>
                        <property>version</property>
                        <digest>abc</digest>
                        <digest>SHA-1</digest>
                        <digest>hex</digest>
                    </data>
                </xf:instance>
            </xf:model>
        </div>
        <xf:group>
            <xf:label>Functions</xf:label>

            <xf:trigger>
                <xf:label>XForms</xf:label>
                <xf:toggle case="xfFunctions"/>
            </xf:trigger>
            <xf:trigger>
                <xf:label>betterFORM</xf:label>
                <xf:toggle case="bfFunctions"/>
            </xf:trigger>
            <br/>
            <br/>
            <xf:switch>
                <xf:case  id="xfFunctions" >
                    <xf:group>
                    <xf:label>XForms Function Library</xf:label>
                    <table>
                        <tr>
                            <td>Function</td>
                            <td>Description</td>
                            <td>Sample</td>
                            <td>Result</td>
                        </tr>
                        <tr>
                            <td>boolean-from-string</td>
                            <td></td>
                            <td>boolean-from-string(<xf:input class="booleanFromString" ref="booleanFromString"><xf:label/></xf:input>)</td>
                            <td><xf:output value="boolean-from-string(booleanFromString)"/></td>
                        </tr>
                        <tr>
                            <td>is-card-number</td>
                            <td></td>
                            <td>is-card-number(<xf:input class="isCardNumber" ref="isCardNumber"><xf:label/></xf:input>)</td>
                            <td><xf:output value="is-card-number(isCardNumber)"/></td>
                        </tr>
                        <tr>
                            <td>count-non-empty</td>
                            <td></td>
                            <td>count-non-empty(<xf:input class="countNonEmpty(" ref="countNonEmpty"><xf:label/></xf:input>)</td>
                            <td><xf:output value="count-non-empty(countNonEmpty)"/></td>
                        </tr>
                        <tr>
                            <td>IF</td>
                            <td></td>
                            <td>IF(5 eq 5, true(), false())</td>
                            <td><xf:output value="IF(5 eq 5, true(), false())"/></td>
                        </tr>
                        <tr>
                            <td>instance</td>
                            <td></td>
                            <td>instance('i-default')/value[1]</td>
                            <td><xf:output value="instance('i-default')/value[1]"/></td>
                        </tr>
                        <tr>
                            <td>power</td>
                            <td></td>
                            <td>power(<xf:input class="power" ref="power[1]"><xf:label/></xf:input>,<xf:input class="power" ref="power[2]"><xf:label/></xf:input>)</td>
                            <td><xf:output value="power(power[1], power[2])"/></td>
                        </tr>
                        <tr>
                            <td>random</td>
                            <td></td>
                            <td>random()</td>
                            <td><xf:output value="random()"/></td>
                        </tr>
                        <tr>
                            <td>compare</td>
                            <td></td>
                            <td>compare( <xf:input class="compare" ref="compare1"><xf:label/></xf:input>,<xf:input class="compare" ref="compare2"><xf:label/></xf:input>)</td>
                            <td><xf:output value="compare(compare1,compare2)"/></td>
                        </tr>
                        <tr>
                            <td>property</td>
                            <td></td>
                            <td>property(<xf:select1 class="property" ref="property" appearance="minimal">
                                                <xf:label/>
                                            <xf:choices>
                                                <xf:item>
                                                    <xf:label>version</xf:label>
                                                    <xf:value>version</xf:value>
                                                </xf:item>
                                                <xf:item>
                                                    <xf:label>conformance-level</xf:label>
                                                    <xf:value>conformance-level</xf:value>
                                                </xf:item>
                                            </xf:choices>
                                          </xf:select1>)</td>
                            <td><xf:output value="property(property)"/></td>
                        </tr>
                        <tr>
                            <td>digest</td>
                            <td></td>
                            <td>digest(<xf:input class="digest" ref="digest[1]"><xf:label/></xf:input>,
                                       <xf:select1 class="digest" ref="digest[2]"><xf:label/>
                                           <xf:choices>
                                               <xf:item>
                                                   <xf:label>MD5</xf:label>
                                                   <xf:value>MD5</xf:value>
                                               </xf:item>
                                               <xf:item>
                                                   <xf:label>SHA-1</xf:label>
                                                   <xf:value>SHA-1</xf:value>
                                               </xf:item>
                                               <xf:item>
                                                   <xf:label>SHA-256</xf:label>
                                                   <xf:value>SHA-256</xf:value>
                                               </xf:item>
                                               <xf:item>
                                                   <xf:label>SHA-384</xf:label>
                                                   <xf:value>SHA-384</xf:value>
                                               </xf:item>
                                               <xf:item>
                                                   <xf:label>SHA-512</xf:label>
                                                   <xf:value>SHA-512</xf:value>
                                               </xf:item>
                                           </xf:choices>
                                        </xf:select1>
                                        <xf:select1 class="digest" ref="digest[3]"><xf:label/>
                                            <xf:choices>
                                               <xf:item>
                                                   <xf:label>base64</xf:label>
                                                   <xf:value>base64</xf:value>
                                               </xf:item>
                                               <xf:item>
                                                   <xf:label>hex</xf:label>
                                                   <xf:value>hex</xf:value>
                                               </xf:item>
                                           </xf:choices>
                                        </xf:select1></td>
                            <td><xf:output value="digest(digest[1], digest[2], digest[3])"/></td>
                        </tr>
                        <tr>
                            <td>hmac</td>
                            <td></td>
                            <td>hmac('Jefe', 'what do ya want for nothing?', 'SHA-1')</td>
                            <td><xf:output value="hmac('Jefe', 'what do ya want for nothing?', 'SHA-1')"/></td>
                        </tr>
                        <tr>
                                <td>local-date</td>
                                <td></td>
                                <td>local-date()</td>
                                <td><xf:output value="local-date()"/></td>
                            </tr>
                        <tr>
                            <td>local-dateTime</td>
                            <td></td>
                            <td>local-dateTime()</td>
                            <td><xf:output value="local-dateTime()"/></td>
                        </tr>
                        <tr>
                            <td>now</td>
                            <td></td>
                            <td>now()</td>
                            <td><xf:output value="now()"/></td>
                        </tr>
                        <tr>
                            <td>days-from-date</td>
                            <td></td>
                            <td>days-from-date('2002-01-01T23:15:16+01:00')</td>
                            <td><xf:output value="days-from-date('2002-01-01T23:15:16+01:00')"/></td>
                        </tr>
                        <tr>
                            <td>days-to-date</td>
                            <td></td>
                            <td>days-to-date(11688)</td>
                            <td><xf:output value="days-to-date(11688)"/></td>
                        </tr>
                        <tr>
                            <td>seconds-from-dateTime</td>
                            <td></td>
                            <td>seconds-from-dateTime('2002-01-01')</td>
                            <td><xf:output value="seconds-from-dateTime('1970-01-01T00:00:00Z')"/></td>
                        </tr>
                        <tr>
                            <td>seconds-to-dateTime</td>
                            <td/>
                            <td>seconds-to-dateTime(86400)</td>
                            <td><xf:output value="seconds-to-dateTime(86400)"/></td>
                        </tr>
                        <tr>
                            <td>adjust-dateTime-to-timezone</td>
                            <td></td>
                            <td>adjust-dateTime-to-timezone('2002-01-01T14:15:16Z')</td>
                            <td><xf:output value="adjust-dateTime-to-timezone('2002-01-01T14:15:16Z')"/></td>
                        </tr>
                        <tr>
                            <td>seconds</td>
                            <td></td>
                            <td>seconds('P1Y2M')</td>
                            <td><xf:output value="seconds('P1Y2M')"/></td>
                        </tr>
                        <tr>
                            <td>month</td>
                            <td></td>
                            <td>months('P1Y2M')</td>
                            <td><xf:output value="months('P1Y2M')"/></td>
                        </tr>
                        <tr>
                            <td>choose</td>
                            <td></td>
                            <td>choose(true(), 'then', 'else')</td>
                            <td><xf:output value="choose(true(), 'then', 'else')"/></td>
                        </tr>
                    </table>
                    </xf:group>
                </xf:case>
                <xf:case  id="bfFunctions">
                    <xf:group>
                    <xf:label>betterFORM Function Library</xf:label>
                    </xf:group>
                </xf:case>
            </xf:switch>
        </xf:group>


<!-- TO BE ADDED -->
<!--
    <code>
     e = register("{" + NamespaceConstants.XFORMS_NS + "}adjust-dateTime-to-timezone", AdjustDateTimeToTimezone.class, 0, 0, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}seconds", Seconds.class, 0, 1, 1, BuiltInAtomicType.NUMERIC, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}months", Months.class, 0, 1, 1, BuiltInAtomicType.NUMERIC, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}choose", Choose.class, 0, 3, 3, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE);
     arg(e, 0, BuiltInAtomicType.BOOLEAN, StaticProperty.EXACTLY_ONE);
     arg(e, 1, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE);
     arg(e, 2, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}context", Context.class, 0, 0, 0, Type.ITEM_TYPE, StaticProperty.EXACTLY_ONE);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}event", Event.class, 0, 1, 1, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}id", Id2.class, 0, 1, 2, NodeKindTest.ELEMENT, StaticProperty.ALLOWS_ZERO_OR_MORE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_MORE, EMPTY);
     arg(e, 1, Type.NODE_TYPE, StaticProperty.ALLOWS_ONE_OR_MORE, null);

     //Adapted xpath 2.0 functions
     e = register("{" + NamespaceConstants.XFORMS_NS + "}avg", Aggregate2.class, Aggregate2.AVG, 1, 1, BuiltInAtomicType.ANY_ATOMIC, StaticProperty.ALLOWS_ZERO_OR_ONE);
     // can't say "same as first argument" because the avg of a set of
     // integers is decimal
     arg(e, 0, BuiltInAtomicType.ANY_ATOMIC, StaticProperty.ALLOWS_ZERO_OR_MORE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}max", Minimax2.class, Minimax2.MAX, 1, 2, BuiltInAtomicType.ANY_ATOMIC, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.ANY_ATOMIC, StaticProperty.ALLOWS_ZERO_OR_MORE, EMPTY);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}min", Minimax2.class, Minimax2.MIN, 1, 2, BuiltInAtomicType.ANY_ATOMIC, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.ANY_ATOMIC, StaticProperty.ALLOWS_ZERO_OR_MORE, EMPTY);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     // Standard XPath functions
     e = register("{" + NamespaceConstants.XFORMS_NS + "}abs", Rounding.class, Rounding.ABS, 1, 1, SAME_AS_FIRST_ARGUMENT, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.NUMERIC, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}adjust-date-to-timezone", Adjust.class, 0, 1, 2, BuiltInAtomicType.DATE, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.DATE, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);
     arg(e, 1, BuiltInAtomicType.DAY_TIME_DURATION, StaticProperty.ALLOWS_ZERO_OR_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}adjust-time-to-timezone", Adjust.class, 0, 1, 2, BuiltInAtomicType.TIME, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.TIME, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);
     arg(e, 1, BuiltInAtomicType.DAY_TIME_DURATION, StaticProperty.ALLOWS_ZERO_OR_ONE, null);


     e = register("{" + NamespaceConstants.XFORMS_NS + "}base-uri", BaseURI.class, 0, 0, 1, BuiltInAtomicType.ANY_URI, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, Type.NODE_TYPE, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}boolean", BooleanFn.class, BooleanFn.BOOLEAN, 1, 1, BuiltInAtomicType.BOOLEAN, StaticProperty.EXACTLY_ONE);
     arg(e, 0, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}ceiling", Rounding.class, Rounding.CEILING, 1, 1, SAME_AS_FIRST_ARGUMENT, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.NUMERIC, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}codepoint-equal", CodepointEqual.class, 0, 2, 2, BuiltInAtomicType.BOOLEAN, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}codepoints-to-string", CodepointsToString.class, 0, 1, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.INTEGER, StaticProperty.ALLOWS_ZERO_OR_MORE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}collection", Collection.class, 0, 0, 1, Type.NODE_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}compare", Compare.class, 0, 2, 3, BuiltInAtomicType.INTEGER, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);
     arg(e, 2, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}concat", Concat.class, 0, 2, Integer.MAX_VALUE, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.ANY_ATOMIC, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     // Note, this has a variable number of arguments so it is treated
     // specially

     e = register("{" + NamespaceConstants.XFORMS_NS + "}contains", Contains.class, 0, 2, 3, BuiltInAtomicType.BOOLEAN, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, BooleanValue.TRUE);
     arg(e, 2, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}count", Aggregate2.class, Aggregate2.COUNT, 1, 1, BuiltInAtomicType.INTEGER, StaticProperty.EXACTLY_ONE);
     arg(e, 0, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE, Int64Value.ZERO);

     // XForms has special current version
     // register("{" + NamespaceConstants.XFORMS_NS + "}current", Current.class, 0, 0, 0, Type.ITEM_TYPE, StaticProperty.EXACTLY_ONE);
     register("{" + NamespaceConstants.XFORMS_NS + "}current-date", CurrentDateTime.class, 0, 0, 0, BuiltInAtomicType.DATE, StaticProperty.EXACTLY_ONE);
     register("{" + NamespaceConstants.XFORMS_NS + "}current-dateTime", CurrentDateTime.class, 0, 0, 0, BuiltInAtomicType.DATE_TIME, StaticProperty.EXACTLY_ONE);
     register("{" + NamespaceConstants.XFORMS_NS + "}current-time", CurrentDateTime.class, 0, 0, 0, BuiltInAtomicType.TIME, StaticProperty.EXACTLY_ONE);

     register("{" + NamespaceConstants.XFORMS_NS + "}current-group", CurrentGroup.class, CurrentGroup.CURRENT_GROUP, 0, 0, Type.ITEM_TYPE,
             StaticProperty.ALLOWS_ZERO_OR_MORE);
     register("{" + NamespaceConstants.XFORMS_NS + "}current-grouping-key", CurrentGroup.class, CurrentGroup.CURRENT_GROUPING_KEY, 0, 0, BuiltInAtomicType.ANY_ATOMIC,
             StaticProperty.ALLOWS_ZERO_OR_ONE);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}data", Data.class, 0, 1, 1, BuiltInAtomicType.ANY_ATOMIC, StaticProperty.ALLOWS_ZERO_OR_MORE);
     arg(e, 0, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}dateTime", DateTimeConstructor.class, 0, 2, 2, BuiltInAtomicType.DATE_TIME, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.DATE, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);
     arg(e, 1, BuiltInAtomicType.TIME, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}day-from-date", Component.class, (Component.DAY << 16) + StandardNames.XS_DATE, 1, 1, BuiltInAtomicType.INTEGER,
             StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.DATE, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}day-from-dateTime", Component.class, (Component.DAY << 16) + StandardNames.XS_DATE_TIME, 1, 1, BuiltInAtomicType.INTEGER,
             StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.DATE_TIME, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}days-from-duration", Component.class, (Component.DAY << 16) + StandardNames.XS_DURATION, 1, 1, BuiltInAtomicType.INTEGER,
             StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.DURATION, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}deep-equal", DeepEqual.class, 0, 2, 3, BuiltInAtomicType.BOOLEAN, StaticProperty.EXACTLY_ONE);
     arg(e, 0, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE, null);
     arg(e, 1, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE, null);
     arg(e, 2, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     register("{" + NamespaceConstants.XFORMS_NS + "}default-collation", DefaultCollation.class, 0, 0, 0, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}distinct-values", DistinctValues.class, 0, 1, 2, BuiltInAtomicType.ANY_ATOMIC, StaticProperty.ALLOWS_ZERO_OR_MORE);
     arg(e, 0, BuiltInAtomicType.ANY_ATOMIC, StaticProperty.ALLOWS_ZERO_OR_MORE, EMPTY);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}doc", Doc.class, 0, 1, 1, NodeKindTest.DOCUMENT, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}doc-available", DocAvailable.class, 0, 1, 1, BuiltInAtomicType.BOOLEAN, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, BooleanValue.FALSE);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}document", Document.class, 0, 1, 2, Type.NODE_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE);
     arg(e, 0, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE, null);
     arg(e, 1, Type.NODE_TYPE, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}document-uri", NamePart.class, NamePart.DOCUMENT_URI, 1, 1, BuiltInAtomicType.ANY_URI,
             StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, Type.NODE_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}empty", Existence.class, Existence.EMPTY, 1, 1, BuiltInAtomicType.BOOLEAN, StaticProperty.EXACTLY_ONE);
     arg(e, 0, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE, BooleanValue.TRUE);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}ends-with", EndsWith.class, 0, 2, 3, BuiltInAtomicType.BOOLEAN, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, BooleanValue.TRUE);
     arg(e, 2, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}element-available", Available.class, Available.ELEMENT_AVAILABLE, 1, 1, BuiltInAtomicType.BOOLEAN,
             StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}encode-for-uri", EscapeURI.class, EscapeURI.ENCODE_FOR_URI, 1, 1, BuiltInAtomicType.STRING,
             StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, StringValue.EMPTY_STRING);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}escape-html-uri", EscapeURI.class, EscapeURI.HTML_URI, 1, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, StringValue.EMPTY_STRING);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}error", Error.class, 0, 0, 3, Type.ITEM_TYPE, StaticProperty.EXACTLY_ONE);
     // The return type is chosen so that use of the error() function
     // will never give a static type error.
     arg(e, 0, BuiltInAtomicType.QNAME, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);
     arg(e, 2, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}exactly-one", TreatFn.class, StaticProperty.EXACTLY_ONE, 1, 1, SAME_AS_FIRST_ARGUMENT, StaticProperty.EXACTLY_ONE);
     arg(e, 0, Type.ITEM_TYPE, StaticProperty.EXACTLY_ONE, null);
     // because we don't do draconian static type checking, we can do the
     // work in the argument type checking code

     e = register("{" + NamespaceConstants.XFORMS_NS + "}exists", Existence.class, Existence.EXISTS, 1, 1, BuiltInAtomicType.BOOLEAN, StaticProperty.EXACTLY_ONE);
     arg(e, 0, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE, BooleanValue.FALSE);

     register("{" + NamespaceConstants.XFORMS_NS + "}false", BooleanFn.class, BooleanFn.FALSE, 0, 0, BuiltInAtomicType.BOOLEAN, StaticProperty.EXACTLY_ONE);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}floor", Rounding.class, Rounding.FLOOR, 1, 1, SAME_AS_FIRST_ARGUMENT, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.NUMERIC, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}format-date", FormatDate.class, StandardNames.XS_DATE, 2, 5, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.DATE, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);
     arg(e, 2, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     arg(e, 3, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     arg(e, 4, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}format-dateTime", FormatDate.class, StandardNames.XS_DATE_TIME, 2, 5, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.DATE_TIME, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);
     arg(e, 2, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     arg(e, 3, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     arg(e, 4, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}format-number", FormatNumber.class, 0, 2, 3, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.NUMERIC, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);
     arg(e, 2, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}format-time", FormatDate.class, StandardNames.XS_TIME, 2, 5, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.TIME, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);
     arg(e, 2, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     arg(e, 3, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     arg(e, 4, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}function-available", Available.class, Available.FUNCTION_AVAILABLE, 1, 2, BuiltInAtomicType.BOOLEAN,
             StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);
     arg(e, 1, BuiltInAtomicType.INTEGER, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}generate-id", NamePart.class, NamePart.GENERATE_ID, 0, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, Type.NODE_TYPE, StaticProperty.ALLOWS_ZERO_OR_ONE, StringValue.EMPTY_STRING);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}hours-from-dateTime", Component.class, (Component.HOURS << 16) + StandardNames.XS_DATE_TIME, 1, 1, BuiltInAtomicType.INTEGER,
             StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.DATE_TIME, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}hours-from-duration", Component.class, (Component.HOURS << 16) + StandardNames.XS_DURATION, 1, 1, BuiltInAtomicType.INTEGER,
             StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.DURATION, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}hours-from-time", Component.class, (Component.HOURS << 16) + StandardNames.XS_TIME, 1, 1, BuiltInAtomicType.INTEGER,
             StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.TIME, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}idref", Idref.class, 0, 1, 2, Type.NODE_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_MORE, EMPTY);
     arg(e, 1, Type.NODE_TYPE, StaticProperty.EXACTLY_ONE, null);

     register("{" + NamespaceConstants.XFORMS_NS + "}implicit-timezone", CurrentDateTime.class, 0, 0, 0, BuiltInAtomicType.DAY_TIME_DURATION, StaticProperty.EXACTLY_ONE);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}in-scope-prefixes", InScopePrefixes.class, 0, 1, 1, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_MORE);
     arg(e, 0, NodeKindTest.ELEMENT, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}index-of", IndexOf.class, 0, 2, 3, BuiltInAtomicType.INTEGER, StaticProperty.ALLOWS_ZERO_OR_MORE);
     arg(e, 0, BuiltInAtomicType.ANY_ATOMIC, StaticProperty.ALLOWS_ZERO_OR_MORE, EMPTY);
     arg(e, 1, BuiltInAtomicType.ANY_ATOMIC, StaticProperty.EXACTLY_ONE, null);
     arg(e, 2, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}insert-before", Insert.class, 0, 3, 3, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE);
     arg(e, 0, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE, null);
     arg(e, 1, BuiltInAtomicType.INTEGER, StaticProperty.EXACTLY_ONE, null);
     arg(e, 2, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}iri-to-uri", EscapeURI.class, EscapeURI.IRI_TO_URI, 1, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, StringValue.EMPTY_STRING);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}key", KeyFn.class, 0, 2, 3, Type.NODE_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);
     arg(e, 1, BuiltInAtomicType.ANY_ATOMIC, StaticProperty.ALLOWS_ZERO_OR_MORE, EMPTY);
     arg(e, 2, Type.NODE_TYPE, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}lang", Lang.class, 0, 1, 2, BuiltInAtomicType.BOOLEAN, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     arg(e, 1, Type.NODE_TYPE, StaticProperty.EXACTLY_ONE, null);

     register("{" + NamespaceConstants.XFORMS_NS + "}last", Last.class, 0, 0, 0, BuiltInAtomicType.INTEGER, StaticProperty.EXACTLY_ONE);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}local-name", NamePart.class, NamePart.LOCAL_NAME, 0, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, Type.NODE_TYPE, StaticProperty.ALLOWS_ZERO_OR_ONE, StringValue.EMPTY_STRING);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}local-name-from-QName", Component.class, (Component.LOCALNAME << 16) + StandardNames.XS_QNAME, 1, 1,
             BuiltInAtomicType.NCNAME, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.QNAME, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}lower-case", ForceCase.class, ForceCase.LOWERCASE, 1, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, StringValue.EMPTY_STRING);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}matches", Matches.class, 0, 2, 3, BuiltInAtomicType.BOOLEAN, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);
     arg(e, 2, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}minutes-from-dateTime", Component.class, (Component.MINUTES << 16) + StandardNames.XS_DATE_TIME, 1, 1,
             BuiltInAtomicType.INTEGER, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.DATE_TIME, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}minutes-from-duration", Component.class, (Component.MINUTES << 16) + StandardNames.XS_DURATION, 1, 1,
             BuiltInAtomicType.INTEGER, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.DURATION, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}minutes-from-time", Component.class, (Component.MINUTES << 16) + StandardNames.XS_TIME, 1, 1, BuiltInAtomicType.INTEGER,
             StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.TIME, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}month-from-date", Component.class, (Component.MONTH << 16) + StandardNames.XS_DATE, 1, 1, BuiltInAtomicType.INTEGER,
             StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.DATE, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}month-from-dateTime", Component.class, (Component.MONTH << 16) + StandardNames.XS_DATE_TIME, 1, 1, BuiltInAtomicType.INTEGER,
             StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.DATE_TIME, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}months-from-duration", Component.class, (Component.MONTH << 16) + StandardNames.XS_DURATION, 1, 1, BuiltInAtomicType.INTEGER,
             StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.DURATION, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}name", NamePart.class, NamePart.NAME, 0, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, Type.NODE_TYPE, StaticProperty.ALLOWS_ZERO_OR_ONE, StringValue.EMPTY_STRING);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}namespace-uri", NamePart.class, NamePart.NAMESPACE_URI, 0, 1, BuiltInAtomicType.ANY_URI,
             StaticProperty.EXACTLY_ONE);
     arg(e, 0, Type.NODE_TYPE, StaticProperty.ALLOWS_ZERO_OR_ONE, StringValue.EMPTY_STRING);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}namespace-uri-for-prefix", NamespaceForPrefix.class, 0, 2, 2, BuiltInAtomicType.ANY_URI,
             StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     arg(e, 1, NodeKindTest.ELEMENT, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}namespace-uri-from-QName", Component.class, (Component.NAMESPACE << 16) + StandardNames.XS_QNAME, 1, 1,
             BuiltInAtomicType.ANY_URI, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.QNAME, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}nilled", Nilled.class, 0, 1, 1, BuiltInAtomicType.BOOLEAN, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, Type.NODE_TYPE, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}node-name", NamePart.class, NamePart.NODE_NAME, 1, 1, BuiltInAtomicType.QNAME, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, Type.NODE_TYPE, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}not", BooleanFn.class, BooleanFn.NOT, 1, 1, BuiltInAtomicType.BOOLEAN, StaticProperty.EXACTLY_ONE);
     arg(e, 0, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE, BooleanValue.TRUE);

     register("{" + NamespaceConstants.XFORMS_NS + "}normalize-space", NormalizeSpace.class, 0, 0, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     register("{" + NamespaceConstants.XFORMS_NS + "}normalize-space#0", NormalizeSpace.class, 0, 0, 0, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}normalize-space#1", NormalizeSpace.class, 0, 1, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}normalize-unicode", NormalizeUnicode.class, 0, 1, 2, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, StringValue.EMPTY_STRING);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}number", NumberFn.class, 0, 0, 1, BuiltInAtomicType.DOUBLE, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.ANY_ATOMIC, StaticProperty.ALLOWS_ZERO_OR_ONE, DoubleValue.NaN);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}one-or-more", TreatFn.class, StaticProperty.ALLOWS_ONE_OR_MORE, 1, 1, SAME_AS_FIRST_ARGUMENT,
             StaticProperty.ALLOWS_ONE_OR_MORE);
     arg(e, 0, Type.ITEM_TYPE, StaticProperty.ALLOWS_ONE_OR_MORE, null);
     // because we don't do draconian static type checking, we can do the
     // work in the argument type checking code

     register("{" + NamespaceConstants.XFORMS_NS + "}position", Position.class, 0, 0, 0, BuiltInAtomicType.INTEGER, StaticProperty.EXACTLY_ONE);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}prefix-from-QName", Component.class, (Component.PREFIX << 16) + StandardNames.XS_QNAME, 1, 1, BuiltInAtomicType.NCNAME,
             StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.QNAME, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}QName", QNameFn.class, 0, 2, 2, BuiltInAtomicType.QNAME, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}regex-group", RegexGroup.class, 0, 1, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.INTEGER, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}remove", Remove.class, 0, 2, 2, SAME_AS_FIRST_ARGUMENT, StaticProperty.ALLOWS_ZERO_OR_MORE);
     arg(e, 0, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE, EMPTY);
     arg(e, 1, BuiltInAtomicType.INTEGER, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}replace", Replace.class, 0, 3, 4, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, StringValue.EMPTY_STRING);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);
     arg(e, 2, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);
     arg(e, 3, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}resolve-QName", ResolveQName.class, 0, 2, 2, BuiltInAtomicType.QNAME, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);
     arg(e, 1, NodeKindTest.ELEMENT, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}resolve-uri", ResolveURI.class, 0, 1, 2, BuiltInAtomicType.ANY_URI, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}reverse", Reverse.class, 0, 1, 1, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE);
     arg(e, 0, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}root", Root.class, 0, 0, 1, Type.NODE_TYPE, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, Type.NODE_TYPE, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}round", Rounding.class, Rounding.ROUND, 1, 1, SAME_AS_FIRST_ARGUMENT, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.NUMERIC, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}round-half-to-even", Rounding.class, Rounding.HALF_EVEN, 1, 2, SAME_AS_FIRST_ARGUMENT,
             StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.NUMERIC, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);
     arg(e, 1, BuiltInAtomicType.INTEGER, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}seconds-from-duration", Component.class, (Component.SECONDS << 16) + StandardNames.XS_DURATION, 1, 1,
             BuiltInAtomicType.DECIMAL, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.DURATION, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}seconds-from-time", Component.class, (Component.SECONDS << 16) + StandardNames.XS_TIME, 1, 1, BuiltInAtomicType.DECIMAL,
             StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.TIME, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}starts-with", StartsWith.class, 0, 2, 3, BuiltInAtomicType.BOOLEAN, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, BooleanValue.TRUE);
     arg(e, 2, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     register("{" + NamespaceConstants.XFORMS_NS + "}static-base-uri", StaticBaseURI.class, 0, 0, 0, BuiltInAtomicType.ANY_URI, StaticProperty.ALLOWS_ZERO_OR_ONE);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}string", StringFn.class, 0, 0, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_ONE, StringValue.EMPTY_STRING);

     register("{" + NamespaceConstants.XFORMS_NS + "}string-length", StringLength.class, 0, 0, 1, BuiltInAtomicType.INTEGER, StaticProperty.EXACTLY_ONE);
     register("{" + NamespaceConstants.XFORMS_NS + "}string-length#0", StringLength.class, 0, 0, 0, BuiltInAtomicType.INTEGER, StaticProperty.EXACTLY_ONE);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}string-length#1", StringLength.class, 0, 1, 1, BuiltInAtomicType.INTEGER, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}string-join", StringJoin.class, 0, 2, 2, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_MORE, StringValue.EMPTY_STRING);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}string-to-codepoints", StringToCodepoints.class, 0, 1, 1, BuiltInAtomicType.INTEGER,
             StaticProperty.ALLOWS_ZERO_OR_MORE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}subsequence", Subsequence.class, 0, 2, 3, SAME_AS_FIRST_ARGUMENT, StaticProperty.ALLOWS_ZERO_OR_MORE);
     arg(e, 0, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE, EMPTY);
     arg(e, 1, BuiltInAtomicType.NUMERIC, StaticProperty.EXACTLY_ONE, null);
     arg(e, 2, BuiltInAtomicType.NUMERIC, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}substring", Substring.class, 0, 2, 3, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, StringValue.EMPTY_STRING);
     arg(e, 1, BuiltInAtomicType.NUMERIC, StaticProperty.EXACTLY_ONE, null);
     arg(e, 2, BuiltInAtomicType.NUMERIC, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}substring-after", SubstringAfter.class, 0, 2, 3, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     arg(e, 2, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}substring-before", SubstringBefore.class, 0, 2, 3, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, StringValue.EMPTY_STRING);
     arg(e, 2, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}sum", Aggregate2.class, Aggregate2.SUM, 1, 2, BuiltInAtomicType.ANY_ATOMIC, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.ANY_ATOMIC, StaticProperty.ALLOWS_ZERO_OR_MORE, null);
     arg(e, 1, BuiltInAtomicType.ANY_ATOMIC, StaticProperty.ALLOWS_ZERO_OR_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}system-property", SystemProperty.class, 0, 1, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}timezone-from-date", Component.class, (Component.TIMEZONE << 16) + StandardNames.XS_DATE, 1, 1,
             BuiltInAtomicType.DAY_TIME_DURATION, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.DATE, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}timezone-from-dateTime", Component.class, (Component.TIMEZONE << 16) + StandardNames.XS_DATE_TIME, 1, 1,
             BuiltInAtomicType.DAY_TIME_DURATION, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.DATE_TIME, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}timezone-from-time", Component.class, (Component.TIMEZONE << 16) + StandardNames.XS_TIME, 1, 1,
             BuiltInAtomicType.DAY_TIME_DURATION, StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.TIME, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}trace", Trace.class, 0, 2, 2, SAME_AS_FIRST_ARGUMENT, StaticProperty.ALLOWS_ZERO_OR_MORE);
     arg(e, 0, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE, null);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     register("{" + NamespaceConstants.XFORMS_NS + "}true", BooleanFn.class, BooleanFn.TRUE, 0, 0, BuiltInAtomicType.BOOLEAN, StaticProperty.EXACTLY_ONE);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}translate", Translate.class, 0, 3, 3, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, StringValue.EMPTY_STRING);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);
     arg(e, 2, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}tokenize", Tokenize.class, 0, 2, 3, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_MORE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);
     arg(e, 2, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}type-available", Available.class, Available.TYPE_AVAILABLE, 1, 1, BuiltInAtomicType.BOOLEAN,
             StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}unordered", Unordered.class, 0, 1, 1, SAME_AS_FIRST_ARGUMENT, StaticProperty.ALLOWS_ZERO_OR_MORE);
     arg(e, 0, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_MORE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}upper-case", ForceCase.class, ForceCase.UPPERCASE, 1, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, StringValue.EMPTY_STRING);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}unparsed-entity-uri", UnparsedEntity.class, UnparsedEntity.URI, 1, 1, BuiltInAtomicType.ANY_URI,
             StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     // internal version of unparsed-entity-uri with second argument
     // representing the current document
     e = register("{" + NamespaceConstants.XFORMS_NS + "}unparsed-entity-uri_9999_", UnparsedEntity.class, UnparsedEntity.URI, 2, 2, BuiltInAtomicType.STRING,
             StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);
     arg(e, 1, Type.NODE_TYPE, StaticProperty.EXACTLY_ONE, null);
     // it must actually be a document node, but there's a non-standard
     // error code

     e = register("{" + NamespaceConstants.XFORMS_NS + "}unparsed-entity-public-id", UnparsedEntity.class, UnparsedEntity.PUBLIC_ID, 1, 1, BuiltInAtomicType.STRING,
             StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     // internal version of unparsed-entity-public-id with second
     // argument representing the current document
     e = register("{" + NamespaceConstants.XFORMS_NS + "}unparsed-entity-public-id_9999_", UnparsedEntity.class, UnparsedEntity.PUBLIC_ID, 2, 2, BuiltInAtomicType.STRING,
             StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);
     arg(e, 1, Type.NODE_TYPE, StaticProperty.EXACTLY_ONE, null);
     // it must actually be a document node, but there's a non-standard
     // error code

     e = register("{" + NamespaceConstants.XFORMS_NS + "}unparsed-text", UnparsedText.class, UnparsedText.UNPARSED_TEXT, 1, 2, BuiltInAtomicType.STRING,
             StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}unparsed-text-available", UnparsedText.class, UnparsedText.UNPARSED_TEXT_AVAILABLE, 1, 2,
             BuiltInAtomicType.BOOLEAN, StaticProperty.EXACTLY_ONE);
     arg(e, 0, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);
     arg(e, 1, BuiltInAtomicType.STRING, StaticProperty.EXACTLY_ONE, null);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}year-from-date", Component.class, (Component.YEAR << 16) + StandardNames.XS_DATE, 1, 1, BuiltInAtomicType.INTEGER,
             StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.DATE, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}year-from-dateTime", Component.class, (Component.YEAR << 16) + StandardNames.XS_DATE_TIME, 1, 1, BuiltInAtomicType.INTEGER,
             StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.DATE_TIME, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}years-from-duration", Component.class, (Component.YEAR << 16) + StandardNames.XS_DURATION, 1, 1, BuiltInAtomicType.INTEGER,
             StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, BuiltInAtomicType.DURATION, StaticProperty.ALLOWS_ZERO_OR_ONE, EMPTY);

     e = register("{" + NamespaceConstants.XFORMS_NS + "}zero-or-one", TreatFn.class, StaticProperty.ALLOWS_ZERO_OR_ONE, 1, 1, SAME_AS_FIRST_ARGUMENT,
             StaticProperty.ALLOWS_ZERO_OR_ONE);
     arg(e, 0, Type.ITEM_TYPE, StaticProperty.ALLOWS_ZERO_OR_ONE, null);
     // because we don't do draconian static type checking, we can do the
     // work in the argument type checking code


    </code>
-->
    </body>


</html>
